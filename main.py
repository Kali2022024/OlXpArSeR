"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–∞—Ä—Å–µ—Ä–∞ —Ü—ñ–Ω
"""
import asyncio
import json
import os
from datetime import datetime
from typing import Optional, List

from config import ParserConfig, DEFAULT_CONFIG
from olx_parser import OlxPriceParser
from models import ParsingResult, Category
from excel_exporter import ExcelExporter

class PriceParserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–æ–º —Ü—ñ–Ω"""
    
    def __init__(self):
        self.config = self.load_config()
        self.parser: Optional[OlxPriceParser] = None
    
    def load_config(self) -> ParserConfig:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –∞–±–æ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        return DEFAULT_CONFIG
    
    def setup_parser(self, base_url: str):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.config.base_url = base_url
        self.parser = OlxPriceParser(self.config)
    
    async def show_categories(self) -> list:
        """–ü–æ–∫–∞–∑—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫"""
        if not self.parser:
            raise ValueError("–ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ setup_parser()")
        
        async with self.parser as parser:
            categories = await parser.get_categories()
            
            if categories:
                print(f"\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ({len(categories)}):")
                for i, category in enumerate(categories, 1):
                    print(f"   {i}. {category.name}")
                    print(f"      URL: {category.url}")
                print(f"üí° –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –í–°–Ü–• –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–≤–µ–¥—ñ—Ç—å: 100")
                print()
            else:
                print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
            
            return categories
    
    async def parse_specific_category(self, category_index: int) -> ParsingResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º"""
        if not self.parser:
            raise ValueError("–ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ setup_parser()")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories = await self.show_categories()
        
        if not categories or category_index < 1 or category_index > len(categories):
            raise ValueError(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {category_index}")
        
        selected_category = categories[category_index - 1]
        print(f"\nüéØ –û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {selected_category.name}")
        
        # –ü–∞—Ä—Å–∏–º–æ —Ç—ñ–ª—å–∫–∏ –æ–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        async with self.parser as parser:
            result = await parser.parse_specific_category(selected_category)
            return result
    
    async def run_parsing(self) -> ParsingResult:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥—É"""
        if not self.parser:
            raise ValueError("–ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ setup_parser()")
        
        async with self.parser as parser:
            result = await parser.parse_catalog()
            return result
    
    def save_results(self, result: ParsingResult, filename: Optional[str] = None, essential_only: bool = False):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"parsing_results_{timestamp}.json"
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        os.makedirs(self.config.output_directory, exist_ok=True)
        filepath = os.path.join(self.config.output_directory, filename)
        
        # –í–∏–±—ñ—Ä –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        if essential_only:
            data_to_save = {
                "success": result.success,
                "products": result.get_essential_products_data(),
                "total_products": result.total_products,
                "parsing_time": result.parsing_time,
                "errors": result.errors
            }
        else:
            data_to_save = result.to_dict()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ JSON
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {filepath}")
        return filepath
    
    def save_results_excel(self, result: ParsingResult, category_name: str) -> str:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ Excel —Ñ–æ—Ä–º–∞—Ç"""
        try:
            exporter = ExcelExporter()
            filepath = exporter.export_to_excel(result, self.config.output_directory, category_name)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ Excel: {filepath}")
            return filepath
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –≤ Excel: {e}")
            return None

async def process_parsing_result(manager: PriceParserManager, result: ParsingResult, category: Category):
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ"""
    if result.success:
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {result.total_products}")
        print(f"‚è±Ô∏è  –ß–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É: {result.parsing_time:.2f} —Å–µ–∫")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if result.products:
            print(f"\nüìã –ü—Ä–∏–∫–ª–∞–¥ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É:")
            first_product = result.products[0]
            print(f"   –ù–∞–∑–≤–∞: {first_product.name}")
            print(f"   –¶—ñ–Ω–∞: {first_product.price} {first_product.currency}")
            print(f"   –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {first_product.product_url}")
            print(f"   –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'‚úÖ' if first_product.availability else '‚ùå'}")
            if first_product.sku:
                print(f"   –ê—Ä—Ç–∏–∫—É–ª: {first_product.sku}")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print(f"\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        full_file = manager.save_results(result, f"olx_{category.name.lower().replace(' ', '_')}_full.json")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        essential_file = manager.save_results(result, f"olx_{category.name.lower().replace(' ', '_')}_essential.json", essential_only=True)
        
        # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤ Excel
        excel_file = manager.save_results_excel(result, category.name)
        
        print(f"üìÅ –ü–æ–≤–Ω—ñ –¥–∞–Ω—ñ: {full_file}")
        print(f"üìÅ –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ: {essential_file}")
        if excel_file:
            print(f"üìä Excel —Ñ–∞–π–ª: {excel_file}")
        
    else:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É:")
        for error in result.errors:
            print(f"   - {error}")

async def parse_all_categories(manager: PriceParserManager, categories: List[Category]):
    """–ü–∞—Ä—Å–∏—Ç—å –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ —á–µ—Ä–∑—ñ"""
    total_categories = len(categories)
    successful_categories = 0
    failed_categories = 0
    
    print(f"\nüöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É {total_categories} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
    print("=" * 60)
    
    for i, category in enumerate(categories, 1):
        try:
            print(f"\nüìä [{i}/{total_categories}] –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {category.name}")
            print(f"   URL: {category.url}")
            
            # –ü–∞—Ä—Å–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            result = await manager.parse_specific_category(i)
            
            if result.success:
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è {category.name} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")
                print(f"   üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {result.total_products}")
                print(f"   ‚è±Ô∏è  –ß–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É: {result.parsing_time:.2f} —Å–µ–∫")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                await process_parsing_result(manager, result, category)
                
                successful_categories += 1
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category.name}:")
                for error in result.errors:
                    print(f"   - {error}")
                failed_categories += 1
            
            # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
            if i < total_categories:
                print(f"‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é...")
                await asyncio.sleep(3)
            
            print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category.name}: {e}")
            failed_categories += 1
            continue
    
    # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üèÅ –ü–ê–†–°–ò–ù–ì –í–°–Ü–• –ö–ê–¢–ï–ì–û–†–Ü–ô –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {successful_categories}")
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {failed_categories}")
    print(f"üìä –í—Å—å–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {total_categories}")
    print("=" * 60)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("=== –ü–∞—Ä—Å–µ—Ä —Ü—ñ–Ω –∑ OLX.ua ===")
    print("–ó–±–∏—Ä–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏:")
    print("‚úÖ –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É")
    print("‚úÖ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞")
    print("‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä")
    print("‚úÖ –ù–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É")
    print("‚úÖ –ê—Ä—Ç–∏–∫—É–ª / –∫–æ–¥ —Ç–æ–≤–∞—Ä—É")
    print("üìä –ï–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑ –≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏")
    print()
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    base_url = input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç OLX.ua: ").strip()
    if not base_url:
        print("–ü–æ–º–∏–ª–∫–∞: –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç")
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞
    manager = PriceParserManager()
    manager.setup_parser(base_url)
    
    print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ —Å–∞–π—Ç—É: {base_url}")
    
    try:
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories = await manager.show_categories()
        
        if not categories:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
            return
        
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        while True:
            try:
                choice = input(f"–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (1-{len(categories)}) –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å 100 –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: ").strip()
                category_index = int(choice)
                
                if 1 <= category_index <= len(categories):
                    break
                elif category_index == 100:
                    break
                else:
                    print(f"‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ {len(categories)} –∞–±–æ 100 –¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
            except ValueError:
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ–±—Ä–∞–Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        if category_index == 100:
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥—É –í–°–Ü–• –∫–∞—Ç–µ–≥–æ—Ä—ñ–π ({len(categories)})...")
            await parse_all_categories(manager, categories)
        else:
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            selected_category = categories[category_index - 1]
            print(f"\nüéØ –û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {selected_category.name}")
            print(f"   URL: {selected_category.url}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            print(f"\nüöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {selected_category.name}")
            
            result = await manager.parse_specific_category(category_index)
            
            if result.success:
                await process_parsing_result(manager, result, selected_category)
            else:
                print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É:")
                for error in result.errors:
                    print(f"   - {error}")
                
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
