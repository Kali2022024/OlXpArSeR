"""
–ú–æ–¥—É–ª—å –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –≤ Excel —Ñ–æ—Ä–º–∞—Ç
"""
import os
from datetime import datetime
from typing import List, Dict, Any, Optional, Set
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter


from models import Product, ParsingResult

class ExcelExporter:
    """–ö–ª–∞—Å –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –≤ Excel —Ñ–æ—Ä–º–∞—Ç"""
    
    def __init__(self):
        self.workbook = None
        self.worksheet = None
        self.existing_products: Set[str] = set()  # –ú–Ω–æ–∂–∏–Ω–∞ —ñ—Å–Ω—É—é—á–∏—Ö –Ω–∞–∑–≤ —Ç–æ–≤–∞—Ä—ñ–≤
    
    def create_workbook(self, category_name: str) -> str:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π Excel —Ñ–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–±–æ—á—É –∫–Ω–∏–≥—É
            self.workbook = Workbook()
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ª–∏—Å—Ç
            self.workbook.remove(self.workbook.active)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç –∑ –Ω–∞–∑–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            sheet_name = self._sanitize_sheet_name(category_name)
            self.worksheet = self.workbook.create_sheet(title=sheet_name)
            
            return sheet_name
            
        except Exception as e:
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–æ–±–æ—á–æ—ó –∫–Ω–∏–≥–∏: {e}")
    
    def _sanitize_sheet_name(self, name: str) -> str:
        """–û—á–∏—â–∞—î –Ω–∞–∑–≤—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ –Ω–∞–∑–≤–∞ –ª–∏—Å—Ç–∞ Excel"""
        # Excel –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –Ω–∞–∑–≤–∏ –ª–∏—Å—Ç—ñ–≤
        invalid_chars = ['\\', '/', '*', '?', ':', '[', ']']
        sanitized = name
        for char in invalid_chars:
            sanitized = sanitized.replace(char, '_')
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –Ω–∞–∑–≤–∏
        if len(sanitized) > 31:
            sanitized = sanitized[:31]
        
        return sanitized
    
    def find_existing_excel_file(self, output_directory: str, category_name: str) -> Optional[str]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ—Å–Ω—É—é—á–∏–π Excel —Ñ–∞–π–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        try:
            if not os.path.exists(output_directory):
                return None
            
            # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ –Ω–∞–∑–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            for filename in os.listdir(output_directory):
                if filename.startswith(f"–û–ª—Ö_{category_name}_") and filename.endswith('.xlsx'):
                    filepath = os.path.join(output_directory, filename)
                    if os.path.isfile(filepath):
                        return filepath
            
            return None
            
        except Exception as e:
            print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É: {e}")
            return None
    
    def load_existing_workbook(self, filepath: str, category_name: str) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å–Ω—É—é—á–∏–π Excel —Ñ–∞–π–ª"""
        try:
            self.workbook = load_workbook(filepath)
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ª–∏—Å—Ç –∑ –Ω–∞–∑–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            sheet_name = self._sanitize_sheet_name(category_name)
            if sheet_name in self.workbook.sheetnames:
                self.worksheet = self.workbook[sheet_name]
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                self.worksheet = self.workbook.create_sheet(title=sheet_name)
                self.setup_headers()
                return True
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            self._load_existing_products()
            
            return True
            
        except Exception as e:
            print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É: {e}")
            return False
    
    def _load_existing_products(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å–Ω—É—é—á—ñ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ª–∏—Å—Ç–∞"""
        try:
            self.existing_products.clear()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if self.worksheet.max_row < 2:
                return
            
            # –ß–∏—Ç–∞—î–º–æ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–µ—Ä—à–æ—ó –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 2-–≥–æ —Ä—è–¥–∫–∞)
            for row in range(2, self.worksheet.max_row + 1):
                cell_value = self.worksheet.cell(row=row, column=1).value
                if cell_value:
                    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                    normalized_name = self._normalize_product_name(str(cell_value))
                    self.existing_products.add(normalized_name)
            
            print(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.existing_products)} —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤")
            
        except Exception as e:
            print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {e}")
    
    def _normalize_product_name(self, name: str) -> str:
        """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
        # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        normalized = name.lower().strip()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –º—ñ–∂ —Å–ª–æ–≤–∞–º–∏
        normalized = ' '.join(normalized.split())
        
        return normalized
    
    def is_duplicate_product(self, product: Product) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ç–æ–≤–∞—Ä –¥—É–±–ª—ñ–∫–∞—Ç–æ–º"""
        normalized_name = self._normalize_product_name(product.name)
        return normalized_name in self.existing_products
    
    def setup_headers(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫"""
        try:
            headers = [
                "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É",
                "–¶—ñ–Ω–∞",
                "–ù–∞—è–≤–Ω—ñ—Å—Ç—å",
                "–ü–æ—Å–∏–ª–∞–Ω–Ω—è"
            ]
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for col, header in enumerate(headers, 1):
                cell = self.worksheet.cell(row=1, column=col, value=header)
                
                # –°—Ç–∏–ª—ñ–∑—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            for col in range(1, len(headers) + 1):
                try:
                    column_letter = get_column_letter(col)
                    if col == 1:  # –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
                        self.worksheet.column_dimensions[column_letter].width = 80
                    elif col == 2:  # –¶—ñ–Ω–∞
                        self.worksheet.column_dimensions[column_letter].width = 15
                    elif col == 3:  # –ù–∞—è–≤–Ω—ñ—Å—Ç—å
                        self.worksheet.column_dimensions[column_letter].width = 20
                    elif col == 4:  # –ü–æ—Å–∏–ª–∞–Ω–Ω—è
                        self.worksheet.column_dimensions[column_letter].width = 60
                except Exception as e:
                    print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏ {col}: {e}")
                    continue
                    
        except Exception as e:
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤: {e}")
    
    def add_product_data(self, products: List[Product]):
        """–î–æ–¥–∞—î –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏ –≤ Excel –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤"""
        new_products_count = 0
        duplicate_products_count = 0
        
        for product in products:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥—É–±–ª—ñ–∫–∞—Ç
                if self.is_duplicate_product(product):
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç: {product.name}")
                    duplicate_products_count += 1
                    continue
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≤—ñ–ª—å–Ω–∏–π —Ä—è–¥–æ–∫
                next_row = self.worksheet.max_row + 1
                
                # –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
                name_cell = self.worksheet.cell(row=next_row, column=1, value=product.name or "–ë–µ–∑ –Ω–∞–∑–≤–∏")
                
                # –¶—ñ–Ω–∞
                price_value = str(product.price) if product.price else "0"
                price_cell = self.worksheet.cell(row=next_row, column=2, value=price_value)
                price_cell.alignment = Alignment(horizontal="right")
                
                # –ù–∞—è–≤–Ω—ñ—Å—Ç—å
                availability_text = "‚úÖ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" if product.availability else "‚ùå –ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
                availability_cell = self.worksheet.cell(row=next_row, column=3, value=availability_text)
                availability_cell.alignment = Alignment(horizontal="center")
                
                # –ü–æ—Å–∏–ª–∞–Ω–Ω—è (–≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è)
                link_cell = self.worksheet.cell(row=next_row, column=4, value="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–æ–≤–∞—Ä—É")
                link_cell.font = Font(color="0000FF", underline="single")
                link_cell.alignment = Alignment(horizontal="center")
                
                # –î–æ–¥–∞—î–º–æ –≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è
                if product.product_url:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –∫–æ–º—ñ—Ä—Ü—ñ
                    link_cell.hyperlink = product.product_url
                    link_cell.value = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–æ–≤–∞—Ä—É"
                
                # –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –¥–æ –º–Ω–æ–∂–∏–Ω–∏ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
                normalized_name = self._normalize_product_name(product.name)
                self.existing_products.add(normalized_name)
                
                new_products_count += 1
                    
            except Exception as e:
                print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É: {e}")
                continue
        
        print(f"üìä –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {new_products_count}")
        print(f"üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {duplicate_products_count}")
        
        return new_products_count, duplicate_products_count
    
    def apply_alternating_row_colors(self):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ"""
        try:
            light_fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
            
            max_row = self.worksheet.max_row
            max_col = self.worksheet.max_column
            
            if max_row > 1 and max_col > 0:
                for row in range(2, max_row + 1):
                    if row % 2 == 0:  # –ü–∞—Ä–Ω—ñ —Ä—è–¥–∫–∏
                        for col in range(1, max_col + 1):
                            try:
                                cell = self.worksheet.cell(row=row, column=col)
                                cell.fill = light_fill
                            except Exception as e:
                                print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–º—ñ—Ä–∫–∏ {row}:{col}: {e}")
                                continue
        except Exception as e:
            print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ –∫–æ–ª—å–æ—Ä—ñ–≤: {e}")
    
    def save_workbook(self, output_directory: str, category_name: str) -> str:
        """–ó–±–µ—Ä—ñ–≥–∞—î Excel —Ñ–∞–π–ª"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            os.makedirs(output_directory, exist_ok=True)
            
            # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"–û–ª—Ö_{category_name}_{timestamp}.xlsx"
            filepath = os.path.join(output_directory, filename)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
            self.workbook.save(filepath)
            
            return filepath
            
        except Exception as e:
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
    
    def export_to_excel(self, result: ParsingResult, output_directory: str, category_name: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –≤ Excel"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            if not result.products:
                raise Exception("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
            
            # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª
            existing_file = self.find_existing_excel_file(output_directory, category_name)
            
            if existing_file:
                print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª: {existing_file}")
                print("üîÑ –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É...")
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª
                if self.load_existing_workbook(existing_file, category_name):
                    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ
                    self.add_product_data(result.products)
                    
                    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∏–ª—ñ
                    self.apply_alternating_row_colors()
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
                    self.workbook.save(existing_file)
                    return existing_file
                else:
                    print("‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ä–æ–±–æ—á—É –∫–Ω–∏–≥—É
            self.create_workbook(category_name)
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.setup_headers()
            
            # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏
            self.add_product_data(result.products)
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∏–ª—ñ
            self.apply_alternating_row_colors()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
            filepath = self.save_workbook(output_directory, category_name)
            
            return filepath
            
        except Exception as e:
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –≤ Excel: {e}")
        finally:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ä–æ–±–æ—á—É –∫–Ω–∏–≥—É
            if self.workbook:
                self.workbook.close()
