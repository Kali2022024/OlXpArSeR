"""
–¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
"""
import asyncio
import json
from decimal import Decimal

from models import Product, Category, ParsingResult
from config import ParserConfig

async def test_models():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–∏—Ö"""
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–∏—Ö ===")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    product = Product(
        name="iPhone 15 Pro Max 256GB",
        price=Decimal("45999.99"),
        product_url="https://example-shop.com/iphone-15-pro-max",
        availability=True,
        sku="IP15PM-256GB",
        category="–°–º–∞—Ä—Ç—Ñ–æ–Ω–∏",
        brand="Apple",
        description="–ù–æ–≤–∏–π iPhone 15 Pro Max –∑ —Ç–∏—Ç–∞–Ω–æ–≤–∏–º –∫–æ—Ä–ø—É—Å–æ–º"
    )
    
    print(f"‚úÖ –¢–æ–≤–∞—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ: {product.name}")
    print(f"   –¶—ñ–Ω–∞: {product.price} {product.currency}")
    print(f"   URL: {product.product_url}")
    print(f"   –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'‚úÖ' if product.availability else '‚ùå'}")
    print(f"   –ê—Ä—Ç–∏–∫—É–ª: {product.sku}")
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ —Å–ª–æ–≤–Ω–∏–∫
    product_dict = product.to_dict()
    print(f"\nüìä –¢–æ–≤–∞—Ä —è–∫ —Å–ª–æ–≤–Ω–∏–∫:")
    print(json.dumps(product_dict, ensure_ascii=False, indent=2))
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    essential_data = product.get_essential_data()
    print(f"\nüéØ –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ:")
    print(json.dumps(essential_data, ensure_ascii=False, indent=2))
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    category = Category(
        name="–°–º–∞—Ä—Ç—Ñ–æ–Ω–∏",
        url="https://example-shop.com/smartphones",
        product_count=150
    )
    
    print(f"\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {category.name}")
    print(f"   URL: {category.url}")
    print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {category.product_count}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–∞—Ä—Å–∏–Ω–≥—É
    result = ParsingResult(
        success=True,
        products=[product],
        categories=[category],
        total_products=1,
        total_categories=1,
        parsing_time=2.5
    )
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É:")
    print(f"   –£—Å–ø—ñ—Ö: {'‚úÖ' if result.success else '‚ùå'}")
    print(f"   –¢–æ–≤–∞—Ä—ñ–≤: {result.total_products}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {result.total_categories}")
    print(f"   –ß–∞—Å: {result.parsing_time} —Å–µ–∫")
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    essential_products = result.get_essential_products_data()
    print(f"\nüéØ –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏:")
    print(json.dumps(essential_products, ensure_ascii=False, indent=2))

async def test_config():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("\n=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ===")
    
    config = ParserConfig(
        base_url="https://example-shop.com",
        max_concurrent_requests=5,
        delay_between_requests=1.5,
        parse_entire_catalog=True,
        output_directory="test_output",
        log_level="DEBUG"
    )
    
    print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞:")
    print(f"   –ë–∞–∑–æ–≤–∏–π URL: {config.base_url}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Ç—ñ–≤: {config.max_concurrent_requests}")
    print(f"   –ó–∞—Ç—Ä–∏–º–∫–∞: {config.delay_between_requests} —Å–µ–∫")
    print(f"   –í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥: {'‚úÖ' if config.parse_entire_catalog else '‚ùå'}")
    print(f"   –í–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {config.output_directory}")
    print(f"   –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è: {config.log_level}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞ —Ü—ñ–Ω")
    print("=" * 50)
    
    await test_models()
    await test_config()
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
    print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ:")
    print("   python main.py")

if __name__ == "__main__":
    asyncio.run(main())
